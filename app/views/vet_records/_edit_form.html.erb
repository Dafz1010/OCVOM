<%= form_with(model: vet_record, id: "vet_record_form") do |form| %>
  <script>
    $(document).on('select2:open', () => {
    let allFound = document.querySelectorAll('.select2-container--open .select2-search__field');
    $(this).one('mouseup keyup',()=>{
      setTimeout(()=>{
        allFound[allFound.length - 1].focus();
      },0);
    });
  });
  </script>
  <div class="row">
    <div class="col-7 sub-form p-2 ">
      <div class="subtitle">
        <h3>Pet Information</h3>
      </div>
      <div class="row ">
        <div class="col-6">
          <div class="col">
            <%= form.label "Name:", style: "display: block" %>
            <%= form.text_field :name, placeholder: "Name of the pet", autocomplete: "off", required: true, autofocus: true, class: "form-control" %>
          </div>

          <div>
            <%= form.label "Species:", style: "display: block" %>
            <%= form.text_field :species, placeholder: "Dog, Cat, Cow, etc.", autocomplete: "off", required: true, class: "form-control"  %>
          </div>

          <div>
            <%= form.label "Location:", style: "display: block" %>
            <%= form.select :place_id, @place_list_options,{prompt: ""},{required: 'true', autocomplete: 'off', class: 'form-select py-0', data: { placeholder: "Select Place"}} %>
          </div>
          
          <div>
            <%= form.label "Breed:", style: "display: block" %>
            <%= form.text_field :breed, placeholder: "Breed of the pet (if known)", autocomplete: "off", class: "form-control"  %>
          </div>

          <div>
            <%= form.label "Age Group:", style: "display: block" %>
            <%= form.select :age_list_id, @age_list_options,{prompt: ""},{required: 'true', autocomplete: 'off', class: 'form-select py-0', data: { placeholder: "Select Age Group"}} %>
          </div>

          <div>
            <%= form.label "Owner:", style: "display: block" %>
            <%= form.text_field :pet_owner, placeholder: "Name of the owner", autocomplete: "off", class: "form-control" %>
          </div>
          <div class="col-12 d-flex">
            <div class="col-6">
              <%= form.label "Status:", style: "display: block" %>
              <%# form.select %>
              <%= form.select :status_id, @status_list_options,{prompt: ""},{autocomplete: 'off', class: 'form-select py-0', data: { placeholder: "No Status"}} %>
            </div>
            <div class="col-6">
              <%= form.label "Condition:", style: "display: block" %>
              <%= form.select :condition_id, @condition_list_options,{prompt: ""},{autocomplete: 'off', class: 'form-select py-0', data: { placeholder: "No Condition"}} %>
            </div>

          </div>


        </div>
        <div class="col-6">
          <%= form.label "Image of the Pet:", style: "display: block" %>
          <div class="col image-upload-container mt-2 position-relative" id="image-drop-container">
            <div class="position-abolute position-absolute top-50 start-50 translate-middle w-100 text-center" style="">
              <div class="material-icons" style="font-size: 120px; color: #c4c4c4;">
                add_a_photo
              </div>
              <div class="text-center" style="color: #c4c4c4;">
                Drag or Upload Image Here
              </div>
            </div>
          </div>
          <script>
            const imageDropContainer = document.getElementById('image-drop-container');
            let currentImg = null;

            imageDropContainer.addEventListener('dragover', (e) => {
              e.preventDefault();
              imageDropContainer.classList.add('drag-over');
            });

            imageDropContainer.addEventListener('dragleave', () => {
              imageDropContainer.classList.remove('drag-over');
            });

            imageDropContainer.addEventListener('drop', (e) => {
              e.preventDefault();
              imageDropContainer.classList.remove('drag-over');
              // set border from dashed to solid
              imageDropContainer.style.border = '2px solid #4F81BD';

              const files = e.dataTransfer.files;
              if (files.length !== 1) {
                alert('Please drop only one image file.');
                return;
              }

              const file = files[0];
              if (!file.type.match('image/(png|jpe?g)')) {
                alert('Only PNG, JPG, and JPEG image files are allowed.');
                return;
              }

              handleDroppedFile(file);
            });

            function handleDroppedFile(file) {
              if (currentImg) {
                currentImg.remove();
              }

              const reader = new FileReader();
              reader.onload = (e) => {
                const img = document.createElement('img');
                img.src = e.target.result;
                imageDropContainer.appendChild(img);
                currentImg = img;

                const placeholderDiv = imageDropContainer.querySelector('.position-absolute');
                if (placeholderDiv) {
                  placeholderDiv.remove();
                }

                // Put the file into the hidden input field
                const hiddenInput = document.getElementById('vet_record_picture');
                const fileList = new DataTransfer();
                fileList.items.add(file);
                hiddenInput.files = fileList.files;

              };
              reader.readAsDataURL(file);
            }

          </script>
          <div class="col-12 d-flex">
            <div class="col-6">
              <%= form.label "Gender:", style: "display: block" %>
              <div class="d-flex justify-content-space-evenly col">

                <%= form.collection_radio_buttons :pet_gender, [[0, "Male"], [1, "Female"]], :first, :last, checked: 0, required: true do |b| %>
                  <div class="col-6">
                    <%= b.radio_button %>
                    <%= b.label %>
                  </div>
                <% end %>
              </div>
            </div>
            <div class="col-6">
              <%= form.label "Neutered:", style: "display: block" %>
              <div class="d-flex justify-content-space-evenly col">
                <%= form.collection_radio_buttons :neutered, [[0, "Yes"], [1, "No"]], :first, :last, checked: 1, required: true do |b| %>
                  <div class="col-6">
                    <%= b.radio_button %>
                    <%= b.label %>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
          <div hidden>
            <%# form file field allow PNG, JPEG and JPG %>
            <%= form.file_field :picture, accept: "image/png, image/jpeg, image/jpg" %>
          </div>
        </div>
      </div>
    </div>
    <div class="col-5 h-100 sub-form p-2 overflow-scroll">
      <div class="subtitle">
        <h3>Pet Medical History</h3>
      </div>
      <table id="medical-history-table">
        <thead>
          <tr>
            <th>#</th>
            <th>Name</th>
            <th>Description</th>
            <th>Vet Place</th>
            <th>Date Recorded</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <% vet_record.medical_histories.each_with_index do |medical_history, index| %>
            <tr class="old-medical-history">
              <td><%= index + 1 %></td>
              <td><%= medical_history.name %></td>
              <td><%= medical_history.description %></td>
              <td><%= medical_history.vet_place %></td>
              <td><%= medical_history.date_recorded.strftime("%b %d %Y") %></td>
              <td></td>
            </tr>
          <% end %>
        </tbody>
        <tfoot>
          <tr>
            <td colspan="6">
              <div class="d-flex justify-content-end">
                <button class="btn btn-primary w-100" type="button" id="add-medical-history">
                  Add Medical History
                </button>
              </div>
            </td>
          </tr>
      </table>
      <% if vet_record.medical_histories.blank? %>
        <div class="text-center col-12 fs-6">
          Leave blank if no medical history
        </div>
      <% end %>
      <script>
        document.getElementById("add-medical-history").addEventListener("click", function(){
          const table = document.querySelector('#medical-history-table tbody');
          // if no rows or class="old-medical-history" rows, add a row
          var is_empty = table.getElementsByTagName('tr').length == 0;  
          var is_old = table.getElementsByTagName('tr')[table.getElementsByTagName('tr').length - 1].classList.contains("old-medical-history");
          // if last row still a input row and name and date is not empty, add a row
          if (!is_empty && !is_old){
            var lastRowName = table.getElementsByTagName('tr')[table.getElementsByTagName('tr').length - 1].getElementsByTagName('td')[1].getElementsByTagName('input')[0].value;
            var lastRowDate = table.getElementsByTagName('tr')[table.getElementsByTagName('tr').length - 1].getElementsByTagName('td')[4].getElementsByTagName('input')[0].value;
            if (lastRowName != "" && lastRowDate != ""){
              convertLastRowToText();
              arrangeMedicalHistoryTable();
              addRow();
            } else {
              alert("Please fill the Name and Date Recorded before adding a new row."); 
            }
          } else {
            addRow();
          }
        });

      function convertLastRowToText(){
        const table = document.querySelector('#medical-history-table tbody');
        // convert class="input-medical-history" to class="new-medical-history"
        const lastRow = table.querySelector('tr:last-of-type');
        lastRow.classList.remove("input-medical-history");
        lastRow.classList.add("new-medical-history");
        const lastRowCells = lastRow.querySelectorAll('td:not(:first-of-type):not(:last-of-type)');
        lastRowCells.forEach((cell) => {
          const input = cell.querySelector('input');
          cell.innerHTML = input.value? input.value : "N/A";

        })
      }

      function addRow(){
        const table = document.querySelector('#medical-history-table tbody');
        // get next id number
        var nextId = table.getElementsByTagName('tr').length + 1;
        var row = table.insertRow(-1);
        row.classList.add("input-medical-history");
        for (var i = 0; i < 6; i++){
          var cell = row.insertCell(i);
          if (i === 0){
            cell.innerHTML = nextId;
          } else if (i === 4){
            var script = document.createElement('script');
            script.innerHTML = `
                $(function() {
                  $('#medical-history-date').daterangepicker({
                    showDropdowns: true,
                    // min date is set to today 
                    maxDate: moment(),
                    minDate: moment().subtract(35, 'years'),
                    
                    autoUpdateInput: false,
                    locale: {
                      format: 'MMM DD, YYYY'
                    },
                    singleDatePicker: true,
                    // display at the center of the input
                    drops: 'auto',
                    // center the calendar
                    opens: 'center'
                  });
                
                  $('#medical-history-date').on('apply.daterangepicker', function(ev, picker) {
                    $(this).val(picker.startDate.format('MMM DD, YYYY'));
                  });

                  $('#medical-history-date').on('cancel.daterangepicker', function(ev, picker) {
                    $(this).val('');
                  }); 
                  $('#medical-history-date').on('keydown paste', function(e){
                    e.preventDefault();
                  });
                });`;
            cell.innerHTML = '<input type="text" class="form-control" id="medical-history-date" />';
            cell.appendChild(script);
          } else if (i === 5){
            continue;
          } else {
            cell.innerHTML = '<input type="text" class="form-control" />';
          }
        }
      }

      function arrangeMedicalHistoryTable(){
        const table = document.querySelector('#medical-history-table tbody');
        const rows = table.querySelectorAll('tr');
        rows.forEach((row, index) => {
          row.querySelector('td:first-of-type').innerHTML = index + 1;
          // if not old-medical-history, add delete button
          if (!row.classList.contains("old-medical-history") && !row.classList.contains("input-medical-history")){
            row.querySelector('td:last-of-type').innerHTML = '<div class="d-flex justify-content-end"><button type="button" class="btn rounded-circle py-1 px-2 " id="delete-medical-history-'+(index+1)+'" onclick="deleteMedicalHistory('+(index+1)+')"><span class="material-icons" style="font-size: 1.5em; color: red;">remove_circle_outline</span></button></div>'
          }

            // row.querySelector('td:last-of-type').innerHTML = '<div class="d-flex justify-content-end"><button class="btn rounded-circle py-1 px-2 " id="delete-medical-history-'+(i+1)+'" onclick="deleteMedicalHistory('+(i+1)+')"><span class="material-icons" style="font-size: 1.5em; color: red;">remove_circle_outline</span></button></div>'
        });
      }


      function deleteMedicalHistory(id){
        const table = document.querySelector('#medical-history-table tbody');
        const row = table.querySelector('tr:nth-of-type('+id+')');
        // delete row only if not old-medical-history or if that row is input row
        row.remove();
        arrangeMedicalHistoryTable();
      }

      </script>
    </div>
  </div>
  <div class="row col-12 justify-content-center">
    <%= link_to "Back", vet_records_path, class: "btn btn-secondary col-2 mt-2 me-2" %>
    <button id="before-submit" class="btn btn-primary col-9 mt-2" type="button" onclick="addMedicalHistoryParams()">
      Submit
    </button>
  </div>
  <div hidden>
    <%= form.submit %>
  </div>
  <script>
    function addMedicalHistoryParams(){
      const form = document.querySelector('#vet_record_form');
      const table = document.querySelector('#medical-history-table tbody');
      // get all new-medical-history rows including the input-medical-history row
      const rows = table.querySelectorAll('tr.new-medical-history, tr.input-medical-history');
      // if no rows, submit form without params
      if (rows.length == 0){
        form.submit();
        return;
      }
      // create an array of objects
      const medical_histories = [];
      rows.forEach((row) => {
        const cells = row.querySelectorAll('td');
        // if not last row
        if (cells[5].querySelector('button') != null){
          medical_histories.push({
            name: cells[1].innerHTML,
            description: cells[2].innerHTML,
            vet_place: cells[3].innerHTML,
            date_recorded: cells[4].innerHTML,
          });
        } else {
          // if last row and name and date recorded is not empty
          if (cells[1].querySelector('input').value != "" && cells[4].querySelector('input').value != ""){
            // convert to N/A if description and vet place is empty
            var description = cells[2].querySelector('input').value != "" ? cells[2].querySelector('input').value : "N/A";
            var vet_place = cells[3].querySelector('input').value != "" ? cells[3].querySelector('input').value : "N/A";
            medical_histories.push({
              name: cells[1].querySelector('input').value,
              description: description,
              vet_place: vet_place,
              date_recorded: cells[4].querySelector('input').value,
            });
          }
        }
      });
      // create hidden inputs

      medical_histories.forEach((history, index) => {
        const fields = ['name', 'description', 'vet_place', 'date_recorded'];

        fields.forEach(field => {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = `vet_record[medical_histories][${index}][${field}]`;
          input.value = history[field];
          form.appendChild(input);
        });
      });

      // submit form
      form.submit();
    }
  </script>
<% end %>
